# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

# Define the number of master and worker nodes
# If this number is changed, remember to update setup-hosts.sh script with the new hosts IP details in /etc/hosts of each VM.
NUM_MASTER_NODE = 2
NUM_WORKER_NODE = 3

IP_NW = "192.168.5."
MASTER_IP_START = 10
NODE_IP_START = 20
LB_IP_START = 30

$firstcpnodeup = <<-'SCRIPT'
IP_ADDR=`ip addr show enp0s8 | grep -w inet | awk '{print $2}' | cut -d/ -f1`
kubeadm init --apiserver-advertise-address="$IP_ADDR" --control-plane-endpoint="lb:6443" --upload-certs
sudo --user=vagrant mkdir -p /home/vagrant/.kube
cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config
export KUBECONFIG=/etc/kubernetes/admin.conf
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
chmod +x /etc/kubeadm_join_cmd.sh
mkdir -p /vagrant/cluster-secrets/etcd
sudo cp /etc/kubernetes/pki/{ca,front-proxy-ca}.{crt,key} /vagrant/cluster-secrets/
sudo cp /etc/kubernetes/pki/sa.{key,pub} /vagrant/cluster-secrets/
sudo cp /etc/kubernetes/pki/etcd/ca.{crt,key} /vagrant/cluster-secrets/etcd/
sudo cp /etc/kubernetes/admin.conf /vagrant/cluster-secrets/
SCRIPT

$cpnodeup = <<-'SCRIPT'
sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@master-1:/etc/kubeadm_join_cmd.sh .
mkdir -p /etc/kubernetes/pki/etcd
sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@master-1:/vagrant/cluster-secrets/etcd/* /etc/kubernetes/pki/etcd
sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@master-1:/vagrant/cluster-secrets/* /etc/kubernetes/pki
IP_ADDR=`ip addr show enp0s8 | grep -w inet | awk '{print $2}' | cut -d/ -f1`
$(cat kubeadm_join_cmd.sh) --apiserver-advertise-address=$IP_ADDR --control-plane
SCRIPT

$dpnodeup = <<-'SCRIPT'
sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@master-1:/etc/kubeadm_join_cmd.sh .
IP_ADDR=`ip addr show enp0s8 | grep -w inet | awk '{print $2}' | cut -d/ -f1`
sh ./kubeadm_join_cmd.sh
SCRIPT

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Provision Load Balancer Node
  config.vm.define "loadbalancer" do |node|
    node.vm.provider "virtualbox" do |vb|
        vb.name = "kube-ha-lb"
        vb.memory = 512
        vb.cpus = 1
    end
    node.vm.hostname = "ha-loadbalancer"
    node.vm.network :private_network, ip: IP_NW + "#{LB_IP_START}"
	node.vm.network "forwarded_port", guest: 22, host: 2730
    node.vm.provision "setup-ip-forward", :type => "shell", inline: "cat <<EOF | tee /etc/sysctl.d/10-ipforward.conf
                                                                         net.ipv4.ip_forward = 1
                                                                         EOF"
    node.vm.provision "setup-ip-forward", :type => "shell", inline: "sysctl -w net.ipv4.ip_forward=1"
    node.vm.provision "setup-masquerade", :type => "shell", inline: "iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE"
    node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
      s.args = ["enp0s8"]
    end

    node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"
	node.vm.provision "install-haproxy", type: "shell", :path => "ubuntu/install-haproxy.sh"
    node.vm.provision "setup-haproxy", :type => "shell", :path => "ubuntu/vagrant/setup-haproxy.sh"
    node.vm.provision "setup-ssh", :type => "shell", :path => "ubuntu/vagrant/setup-ssh.sh"

  end

  # Provision Master Nodes
  (1..NUM_MASTER_NODE).each do |i|
      config.vm.define "master-0#{i}" do |node|
        # Name shown in the GUI
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kube-ha-master-0#{i}"
            vb.memory = 2048
            vb.cpus = 2
        end
        node.vm.hostname = "master-0#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{MASTER_IP_START + i}"
        node.vm.network "forwarded_port", guest: 22, host: "#{2710 + i}"
        node.vm.provision "setup-routing", :type => "shell", inline: "echo Setting gateway via " + IP_NW + "#{LB_IP_START}" + " && ip route add default via " + IP_NW + "#{LB_IP_START}"
        node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"
        node.vm.provision "install-docker", type: "shell", :path => "ubuntu/install-docker.sh"
        node.vm.provision "install-kubernetes-control-plane", type: "shell", :path => "ubuntu/install-kubernetes-control-plane.sh"
        node.vm.provision "setup-ssh", :type => "shell", :path => "ubuntu/vagrant/setup-ssh.sh"
        if i > 1 then
           node.vm.provision "setup-kubernetes", :type => "shell", inline: $cpnodeup
            config.vm.define "loadbalancer" do |lb|
                lb.vm.provision "setup-haproxy", :type => "shell", inline: "cat <<EOF | tee /etc/haproxy/haproxy.cfg
                                                                                 server " + "master-0#{i} " + IP_NW + "#{MASTER_IP_START + i}" + ":6443 check fall 3 rise 2
                                                                              EOF"
                lb.vm.provision "setup-haproxy", :type => "shell", inline: "systemctl reload haproxy"
            end
        else
            # Provision for first control-plane
            node.vm.provision "setup-kubernetes", :type => "shell", inline: $firstcpnodeup
            node.vm.provision "setup-master-isolate", :type => "shell", inline: "export KUBECONFIG=/etc/kubernetes/admin.conf && kubectl taint nodes --all node-role.kubernetes.io/master-"
        end
      end
  end

  # Provision Worker Nodes
  (1..NUM_WORKER_NODE).each do |i|
    config.vm.define "worker-0#{i}" do |node|
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kube-ha-worker-0#{i}"
            vb.memory = 512
            vb.cpus = 1
        end
        node.vm.hostname = "worker-0#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{NODE_IP_START + i}"
		node.vm.network "forwarded_port", guest: 22, host: "#{2720 + i}"
		node.vm.provision "setup-routing", :type => "shell", inline: "echo Setting gateway via " + IP_NW + "#{LB_IP_START}" + " && ip route add default via " + IP_NW + "#{LB_IP_START}"
        node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"
        node.vm.provision "install-docker", type: "shell", :path => "ubuntu/install-docker.sh"
        node.vm.provision "allow-bridge-nf-traffic", :type => "shell", :path => "ubuntu/allow-bridge-nf-traffic.sh"
        node.vm.provision "install-kubernetes-data-plane", type: "shell", :path => "ubuntu/install-kubernetes-data-plane.sh"
        node.vm.provision "setup-ssh", :type => "shell", :path => "ubuntu/vagrant/setup-ssh.sh"
        node.vm.provision "setup-kubernetes", :type => "shell", inline: $dpnodeup
    end
  end

end
